#summary Make Android the best platform for security-based applications.
#labels Android,Security,SmartCard

= Introduction =

Android is Google’s new Operating System targeting Mobile Devices. Android is a very open system: almost all of the application and system software is provided as open source. It is relatively easy to modify the sources, compile these and download the result on readily available hardware. This is true for both application software and system software.<br/>
There can be restrictions on using phones with modified system code on some networks. But for applications it is Google’s intent that they can be created, distributed (via the market or from user to user) and installed by anyone, without the need for approval from _Mobile Handset Manufacturers_ or _Mobile Network Operators (MNOs)_. There is a safety-belt facility in place that allows Google to block and remove applications that have proven to be malicious.<br/>
Android is based on Linux and offers an _Android Development Kit (ADK)_, which uses the Java programming language and a class system that differs substantially from J2SE and J2ME. Also the security related functionality in Android is quite different. There is an implementation of Bouncy Castle offering OpenSSL-focused crypto functionality in the handset, but other typical software components used to communicate with Secure Elements, like JSR 177 (SATSA, for J2ME) and JSR 268 (Smart Card I/O, for J2SE) are currently not implemented.<br/>
Recently a C/C++ based _Native Development Kit (NDK)_ has been added to make it easier to port existing C/C++ software to Android and allow for optimization of compute intense algorithms. However, the ADK is still considered the prime development environment.
The ADK and NDK can be used for all application development for all Android-based phones, supporting backwards compatibility to continue support for older versions.<br/>
Software at the system level can be different for each phone to accommodate the differences in chipsets, hardware modules, operator requirements, device maker preferences and product features. Of course, there are abstraction layers in the system hiding differences to higher layers of the software stack. The Linux system call interface is an example.<br/>
Android has the potential to be an excellent platform to support a new class of applications that can gain the trust of providers and consumers alike to manipulate objects of value - secrets, money or otherwise - using mobile phones. However, Android is a new system and is still evolving. At this moment there are some pieces of the puzzle missing.<br/>
In this paper we will 
 *	describe the current state of affairs
 *	identify the missing pieces of the puzzle
 *	propose an action plan to fill in the gaps
Hereby we hope to create awareness and consensus so that we can move forward quickly to make Android the best mobile phone platform for secure and trustworthy applications.

= The state of affairs =

To gain trust in a system that manipulates valuable objects you need to be convinced that these manipulations are done properly and securely. The objects should not be lost, exposed or corrupted.
It is hard to guarantee that a complex software system, like Android, can perform these manipulations securely. Even if Android offers best of class security - which seems to be the case - there are at least four arguments that will make most people hesitant to entrust it with their secrets:
 #	Android is too new. Only over time it might have seen enough scrutiny to detect and plug the holes that must be there, statistically.
 #	Any software system of this size will continue to have defects because the code changes for fixes and new functionality will continue to introduce new bugs
 #	Android is open source, so it is far easier to find the weaknesses and exploit them. Even though the openness might help more to fix the problems than to exploit them, this will for now make people hesitate to give it their trust?
 #	The fundamental defensive against compromising the system is coming from the Linux kernel. While pretty solid after years of scrutiny by many, it is not perfect, and problems are found regularly. A typical form of attack is a root exploit, which allows an attacker full access to the system.
Therefore, we should take a closer look at the traditional solution for manipulating valuable objects in mobile phones: the Secure Element (SE).

== What is a Secure Element? ==

The term Secure Element is used for a small device with a little microprocessor and a relatively small memory. This device must be highly tamper resistant, so that unauthorized access to its memory and functionality is not possible without destroying the memory’s content.
Secure Elements are found, for instance, in modern credit cards (the ones with the gold-plated contacts, or the contact-less cards) and in the Subscriber Identity Module (SIM) in mobile phones. The SIM is officially called a Universal Integrated Circuit Card or UICC for short.
A Secure Element is used to store and manipulate information in a secure and trustworthy way. Secure Elements are typically idle, but go to work if instructed to do so by electronic pulses from another device, like an Automated Teller Machine (ATM) or a mobile phone.
So there are always 2 devices involved and a communication channel in between.
The handset acts as 