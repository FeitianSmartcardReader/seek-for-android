#summary Introduction about the Global Platform Secure Element Access Control

= Introduction =

<table>
<tr>
<td valign="top" width=35%>
Since Version 2.4.0 the !SmartCard API supports access control specified by Global Platform. It is a standard that enables several parties to independently and securely manage their stakes in a single Secure Element. It can be ensured that only allowed Android applications are able to access specific Java Card applets depending on the APK certificate.

An additional APDU filter scheme (based on an APDU whitelist) is established to have a more detailed control over the access mechanism of an application.

The implementation relies on an extension of the handset integration in combination with a access rule application running on the Secure Element.
</td>
<td width=5%>
</td>
<td width=60%>
<a alt="view large image" href=http://code.google.com/p/seek-for-android/wiki/ARA_overview_png>
<img src=http://seek-for-android.googlecode.com/svn/wiki/img/ARA_overview.png width=277 height=357/>
</a>
<br/>
Click to enlarge
</td>
</tr>
</table>

== Components ==

===Access Control Enforcer===
The Access Control Enforcer (ACE) is the module that is integrated in the !SmartCard API, see `org.simalliance.openmobileapi.service. security` in the !SmartcardService package.<br/>
The module reads the access rule from the ARA-M according to the applications certificate and AID of the applet to be accessed when a communication channel is opened. Access is either granted according to access rule or denied if no rule is found.<br/>
When the communication channel is established all APDU transfer is checked against the APDU filter list if available.<br/>
No access policy is stored in the ACE itself, all data is read from the Secure Element, the ARA-M.

===Access Rule Application===
The Access Rule Application (ARA) on the Secure Element stores the Access Rules. The ARA consists at least of the unique Access Rule Application Master (ARA-M) and may contain several Access Rule Application Clients (ARA-C). All Access Rules stored in the ARA are accessed by the Access Control Enforcer via the ARA-M.

 
===Access Rule===
The Access Rule (AR) is stored in the ARA and can be updated over the air with standardized Global Platform Secure Messaging or Remote Applet Management functionality.<br/>
The AR consists of a set of data objects (DO). The AR is identified by the AID of the applet to be accessed (AID-REF-DO) and the hash (SHA-1) of the applications certificate (Hash-REF-DO). The Access Rule DO contains an APDU access rule (APDU-AR-DO) and/or a NFC access rule (NFC-AR-DO). The APDU-AR-DO contains either a general flag (allowed / not allowed) or an APDU filter list. An APDU filter consists of 4-byte APDU header and a 4-byte APDU filter mask. An APDU filter is applied to the header of the APDU being checked as follows: if((APDUHeader & APDU_filter_mask) == APDU_filter_header) then allow APDU.
The NFC-AR-DO contains an NFC event access rule flag (allowed / not allowed).
<br/><br/>

== How does it work ==
Scenario: a client application wants to communicate with a secure element application.
<table>
<tr>
<td width=40% valign="top">
<a alt="view large image" href=http://code.google.com/p/seek-for-android/wiki/ARA_diagram_png>
<img src=http://seek-for-android.googlecode.com/svn/wiki/img/ARA_diagram.png width=374 height=357/>
</a>
<br/>
Click to enlarge
</td>
<td width=15>
</td>
<td valign=top>
1. A client application signed with a unique key tries to access a specific application through its AID on a Secure Element<br/>
2. ACE reads the ACD for the specific AID. If and computes/verifies the certificate of the client application<br/>
3. Grant access to the client application if rule exists and certificate matches or deny access is rule is not found or certificate is different<br/>
4. Client application can communicate with the SE applet if the command APDUs match the filter list checked by the ACE<br/>
</td>
</tr>
</table>