#summary How to use the SmartCard API in Android

= Introduction =

The !SmartCard API is a reference implementation for a set of platform extensions that will enable Android applications to connect to Secure Elements, e.g. SIM card, Mobile Security Card or others and communicate with application installed on the SE.<br/><br/>
The interface of the library should be considered as stable and independent of the underlying transport mechanism. Application developers usually care about the (stable) !SmartCard API interface whereas system integrators need to know the internals.<br/>
With the latest 2.x release we also provide a new interface that might serve as the input for an upcoming industry standard thus the !SmartCard API currently provides two interfaces simultaneously.<br/><br/>


== !SmartCard API modules ==
<table>
<tr>
<td valign="top" width=35%>
The !SmartCard API consists of several software layers
  * *!SmartcardService* Android remote service as the core of the smart card access<br/>Integration in `frameworks/base/packages/!SmartcardService`<br/>
  * *!SmartcardClient* V1.x wrapper classes to hide the service binding specifics and deal as the main interface for the application developer<br/>Integration in `frameworks/base/core/java/android/smartcard`<br/>
  * *SEService* V2.x wrapper classes to hide the service binding specifics and deal as the main interface for the application developer<br/>Integration in `frameworks/base/core/java/android/com/gieseckedevrient/smartcard`<br/>
  * *xxxTerminal* Implementation of a Secure Element specific terminal, e.g. `UiccTerminal` or `MscTerminal`, ...<br/>Integration in `frameworks/base/packages/SmartcardService`
</td>
<td width=5%>
</td>
<td width=60%>
<a alt="view large image" href=http://code.google.com/p/seek-for-android/wiki/SCAPI_modules_png>
<img src=http://seek-for-android.googlecode.com/svn/wiki/img/SCAPI_modules.png width=250 height=235/>
</a>
<br/>
Click to enlarge
</td>
</tr>
</table>
<br/><br/>

== Architecture ==
The core of the !SmartCard API is encapsulated in a remote Android service. Having a single service instance instead of a pure framework library ensures that security checks (who is accessing the service) and resource management (free a logical channel if a client dies) can be guaranteed.<br/><br/>
However, using an Android service for an API interface is not typical for smart card applications thus additional framework classes wrap the service specifics, e.g. Binding to a Remote Service object. No further logic is kept in the framework classes, clients are permitted to access the service interface directly (but need to deal with the Service specifics by themselves).<br/>
The framework classes - mainly `SmartcardClient` or `SEService` - are just wrapping the service specifics.<br/><br/>
The card channel is used for actual card communication by transferring APDUs. All channel management for logical card channels is encapsulated by the channel objects.<br/><br/>

== Difference between V1 and V2 ==
V1 was the first public release of the platform extensions to allow Secure Element access.It's easy to use but contains some drawbacks that need to solved in the new releases:
 * *No industry standard* V2.x tries to solve this issue
 * *Not part of the Android platform* when an industry standard is established it will be uploaded into the Android platform
 * *API interface too flat* all functionality is mapped into a single !SmartcardClient object
 * *!SmartcardError* is introduced instead of mapping error conditions to existing exception classes
 * *Platform specific instantiation* is part of !SmartcardClient as well as the Secure Element functions - no separation of methods
<br/>

== Using the !SmartCard API ==
Download and apply the patch files according to [BuildingTheSystem Building building the system]<br/> 
Compile the Android platform, build the SDK and flash a [Devices device] or start a new emulator instance with !SmartCard API support.<br/>
Start working on your own project with a quick start from [UsingSmartCardAPI Using the SmartCard API].<br/>
Eclipse is recommended to develop smart card application. But the Android SDK location needs to point to the self compiled SDK.<br/>
Import the samples and run them on the phone or in the emulator. They provide a good starting point.<br/>
<br/>