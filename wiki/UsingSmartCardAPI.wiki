#summary Writing Android applications with access to Secure Elements using the SmartCard API

=Introduction=

This document introduces how the Android smart card library can be used to
develop and test applications which communicate with connected Secure Elements available in the real device or the emulator.

=====Notice=====
Currently, real devices do not support UICC access as the corresponding changes in the baseband are not implemented yet. See [UICCSupport] for more information.
The Mobile Security Card is only supported on real devices, not in the emulator.


===Prerequisites===
  * The phone is flashed with the !SmartCard API according to [BuildingTheSystem]
  * Basic knowledge of Java Card applets and APDU communication
  * Eclipse development IDE with the Android Development Tools (ADT) and Java installed on the host (although Eclipse is not mandatory). See http://developer.android.com/sdk/eclipse-adt.html
  * Android SDK of the compiled sources is used in Eclipse according to [BuildingTheSystem]
  * Basic understanding of the Android development platform. See http://developer.android.com/sdk/index.html

===Setting up the Environment===
Since the !SmartCard API is part of the system, the Eclipse development environment
must use the compiled SDK (from [BuildingTheSystem]) with the integrated !SmartCard API interface as well.<br/>
If not yet done, adapt the SDK location in Eclipse in order to register the API
extension available in the development environment.<br/>
The output of _make sdk_ can be found under _$ANDROID_ROOT/out/host/linux-x86/sdk/..._
 * Open Eclipse and go to Windows -> Preferences -> Android
 * Specify the SDK Location as _$ANDROID_ROOT/out/host/linux-x86/sdk/..._
<br/><br/>

=Hello, Smart Card.=
For developers, the most important code to get started with in a new development environment is the _Hello, World._ sample. The text to be displayed will be created from the applet installed on the smart card.
<br/>The Android application attempts to connect to the smart card and displays the text on the screen of the device.<br/><br/>
This tutorial assumes that the Eclipse environment is set up properly and that the
ADT plug in is installed according to the Android developer documentation on the
Internet.<br/>
In addition, the Hello Smartcard Java Card applet is installed on the Secure Element that is available in the SVN repository.
  * Using the Eclipse project wizard, create a new Android project
    _File -> New -> Project_
  * Select _Android Project_ and click _Next_
  * To create the project, fill in the required fields
    Project name: _!HelloSmartcard_<br/>
    Application name: _Hello Smartcard_<br/>
    Package name: _com.gieseckedevrient.android.hellosmartcard_<br/>
    Create Activity: _!MainActivity_
  * Click _Finish_ to create the body of the (empty) Android application

==Creating the View==
In this tutorial, we do not care much about the user interface, we just create a button which starts the communication with the applet on the smart card when pressed.<br/><br/>
In _!MainActivity.java_, add the following code to the _onCreate()_ method.
{{{
@Override
public void onCreate(Bundle savedInstanceState) {
  final String LOG_TAG = "HelloSmartcard";

  super.onCreate(savedInstanceState);

  LinearLayout layout = new LinearLayout(this);
  layout.setLayoutParams(new LayoutParams(
          LayoutParams.WRAP_CONTENT,
          LayoutParams.WRAP_CONTENT));

  Button button = new Button(this);
  button.setLayoutParams(new LayoutParams(
          LayoutParams.WRAP_CONTENT,
          LayoutParams.WRAP_CONTENT));

  button.setText("Click Me");
  button.setOnClickListener(new OnClickListener() {
    public void onClick(View v) {
      // TODO: smart card access
    }
  });

  layout.addView(button);
  setContentView(layout);
}
}}}
Add the required imports for the new code manually or use `Ctrl+Shift+O` within Eclipse to organize all imports.

==Initialize the !SmartCard API==
Create a handle to the smart card API. At the end of the _onCreate()_ method, add
{{{
try {
  smartcard = new SmartcardClient(this, null);
} catch (SecurityException e) {
  Log.e(LOG_TAG, "Binding not allowed, SMARTCARD permission?");
} catch (Exception e) {
  Log.e(LOG_TAG, "Exception: " + e.getMessage());
}
}}}
and create a _!SmartcardClient_ object within the _!MainActivity_ class
{{{
SmartcardClient smartcard;
}}}
If the sample is executed now on the phone, a security exception is thrown complaining about a missing _SMARTCARD_ permission. See the log output of the command.
{{{
$ adb logcat *:v
}}}
In order to be allowed to use the !SmartCard API, an application must implement the _SMARTCARD_ permission. This permission request notifies a user when installing an application which requests access to a smart card.<br/><br/>
Define the permission in the _!AndroidManifest.xml_ file
{{{
<uses-permission android:name="android.permission.SMARTCARD"/>
}}}
and the sample will launch correctly.<br/><br/>
Note that the constructor will automatically bind to the !SmartcardService interface in
the background. Since service binding is asynchronous in Android, the proper way
to initialize the library is to wait for a notification event as discussed later.<br/><br/>
To clean up the service binding, call the shutdown method when the application is
closing or not using smart card services anymore (for example, in _onDestroy()_)
{{{
@Override
protected void onDestroy() {
  if (smartcard != null) {
    smartcard.shutdown();
  }

  super.onDestroy();
}
}}}

==Accessing the Smart Card==
Add the following code snippet inside the _onClick()_ handler of the button
{{{
ICardChannel cardChannel;
try {
  cardChannel = smartcard.openLogicalChannel(
      "Mobile Security Card",
      new byte[] { (byte)0xD2, 0x76, 0x00, 0x01, 0x18, 0x00, 0x02,
                   (byte)0xFF, 0x49, 0x50, 0x25, (byte)0x89,
                   (byte)0xC0, 0x01, (byte)0x9B, 0x01});

  byte[] respApdu = cardChannel.transmit(
           new byte[] {(byte)0x90, 0x10, 0x00, 0x00, 0x00 });

  cardChannel.close();

  byte[] helloStr = new byte[respApdu.length - 2];
  System.arraycopy(respApdu, 0, helloStr, 0, respApdu.length - 2);

  Toast.makeText(MainActivity.this, new String(helloStr),
                 Toast.LENGTH_LONG).show();
} catch (CardException e) {
  return;
}
}}}
In this code, a logical channel to the smart card applet identified by the AID `D2 76 00 01 18 00 02 FF 49 50 25 89 C0 01 9B 01` is created. The !HelloSmartcard applet
specific APDU command `90 10 00 00 00` is sent.<br/><br/>
The last two bytes of the response `90 00` (=status code) are truncated and the result is
displayed on the screen.

==Running the Application==
In the Eclipse environment, click on Run or press `Ctrl+F11` to execute the sample on the phone.<br/>
Each time the applet is accessed, the counter is incremented by one.<br/>
This shows the data persistence of the application running on the smart card.<br/>
To debug the application, you need to
 * Add additional `Log.e()` messages
 * Run `$ logcat *:v` in a terminal to show all log messages
 * Use Eclipse to set breakpoints and step through the code




