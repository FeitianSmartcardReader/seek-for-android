#summary How to use the PC/SC Subsystem in Android
#labels Android,Smartcard,PCSC

= Introduction =

PC/SC is a widely used industry standard for accessing smart cards in a computing environment. A fee implementation - called _PCSC-Lite_ - supports various platforms so it can easily be ported to Android.<br/>
Having a PC/SC compliant resource manager in place makes it easier to support the API interface in Java - the main development environment.<br/><br/>
Although PC/SC is not the best choice for a mobile phone, it is an easy and straight forward approach to support smart card functionality in the Android platform. [ link to PCSCvsNativeMcEX]<br/><br/>
Requirements: [http://code.google.com/p/seek-for-android/wiki/HowToBuildKernel McEX enabled kernel]
<br/><br/>


== Enabling PC/SC resource manager on device ==

Follow the steps in order to download, patch, compile and install the daemon on the Android device [ link to tested devices]
  * Download the pcsclite sources from [http://pcsclite.alioth.debian.org/ pcsclite homepage]<br/>Currently tested with _version 1.5.5_
  * Apply the patches from the SEEK download page [ link to pcsc patches]<br/>The download file also contains a _README_ explaining what files need to be patched.
  * Configure with `CC=agcc ./configure --host arm-eabi --disable-libhal --disable-libusb --enable-ipcdir=/data/pcscd` and compile with `make`<br/>Note: _agcc_ is a perl script that wraps the Android toolchain for native code compilation
  * Create required directories (_/data/pcsc_ and _/data/pcscd_) on the device and copy `pcscd` and `testpcsc` to `/data/pcsc`
  * Create a `reader.conf` configuration file and copy to _/data/pcsc_
{{{
# Configuration file McEX enabled SD cards
#
FRIENDLYNAME     "Secure SD"
DEVICENAME       /dev/null
LIBPATH          /data/pcsc/libifdmcex.so
CHANNELID        0x0103F8
}}}
  * Download the _PC/SC Driver Developers Kit_ from [http://www.musclecard.com/sourcedrivers.html download]
  * Apply the patches from the SEEK download page [ link to ifddevkit patches]
  * Compile with `make`<br/>Note: _agcc_ required for cross compilation
  * Copy the shared library to _/data/pcsc_
  * Start the PC/SC daemon manually on the device to verify the result
{{{
$ cd <pcsclite-home-dir>
$ CC=agcc ./configure --host arm-eabi --disable-libhal --disable-libusb --enable-ipcdir=/data/pcscd
$ make
$ adb shell mkdir /data/pcsc
$ adb shell mkdir /data/pcscd
$ adb push src/pcscd /data/pcsc
$ adb push src/testpcscd /data/pcsc
$ adb push reader.conf /data/pcsc

$ cd <ifddevkit-home-dir>
$ patch ifdhandler.c ifdhandler.c.patch
$ make
$ adb push libifdmcex.so /data/pcsc

$ adb shell /data/pcsc/pcscd -f -d -c /data/pcsc/reader.conf
$ adb shell /data/pcsc/testpcsc
}}}

  * In order to start the PC/SC daemon automatically when the device boots, append the following lines to _/init.rc_ before creating and flashing the system image.
{{{
# Start PC/SC resource manager automatically
rm -r /data/pcscd
service pcscd /data/pcsc/pcscd -c /data/pcsc/reader.conf
    oneshot
}}}
<br/>

== Compiling the PC/SC Jni Sources ==

The PC/SC Jni Sources are available within the subversion source tree (_/trunk/jni/pcsc_).
The seek project contains a precompiled version of the shared library that can be used in own projects without the need to compile the sources with the NDK.<br/>
However, if required the sources can be build with the following steps: 
  * Checkout the files with `svn checkout http://seek-for-android.googlecode.com/svn/trunk/jni/pcsc`
  * Create an Android NDK project named _pcsc_ with the subversion sources
  * run `make APP=pcsc`
_See the Android NDK documentation for more information how to create and setup and NDK project_
<br/><br/>


== Creating an Android application that uses PC/SC Jni interface ==
In subversion, a _/trunk/samples/PcscSample_ example is uploaded that makes use of the PC/SC Jni interface.<br/><br/>
Running the sample application:
  * Checkout the eclipse project with `svn checkout http://seek-for-android.googlecode.com/svn/trunk/samples/PcscSample`
  * Open the eclipse project, rebuild and deploy the application on the phone with an McEX enabled kernel

Creating a new project:
  * Using eclipse, create a new Android application (Min SDK Verison 3)
  * Copy `android.smartcard.jar` from the subversion _seek_ project into the `libs` folder
  * Copy `libpcsc.so` from the subversion _seek_ project into the `libs\armeabi` folder
  * Add the JAR file to the project dependencies
  * Run the application using PC/SC JNI