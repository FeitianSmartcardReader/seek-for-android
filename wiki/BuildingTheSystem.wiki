#summary How to compile the Android sources with SmartCard API and SCWS support

= Introduction =

This documents describes how to build the system from scratch, apply the smart card related patches and flash a development device with the new images.


== Getting the Android sources ==

A more detailed description how to set up the local work environment can be found  [http://source.android.com/source/download.html here].
{{{
$ repo init -u git://android.git.kernel.org/platform/manifest.git -b android-2.3.4_r1
$ repo sync
}}}
<br/>

== Patching the sources ==
Apply the necessary patches in the root directory of the Android source code to enable smart card support.<br/>
Please make sure what patches should be applied as the different use cases (!SmartCard API, SCWS/BIP, PC/SC support) are separated in different download packages.

===== !SmartCard API support =====
Download the [http://seek-for-android.googlecode.com/files/smartcard-api-2_2_0.tgz smartcard-api-2_2_0.tgz] patch and extract the content:
 * `smartcard-api-2.2.0.patch` - patches the Java sources for !SmartCard API support
 * `uicc.patch` - patches the Android Telephony framework with the required UICC methods for the !SmartCard API !UiccTerminal support
 * `emulator.patch` - patches the qemu module to support a UICC connected through the PC/SC host interface instead of the default Android SIM simulator
 * `cts.patch` - adds the compatibility testsuite for the !SmartCard API.

===== Smart Card Web Server support =====
Download the [http://seek-for-android.googlecode.com/files/smartcard-webserver-1_1.tgz smartcard-webserver-1_1.tgz] patch and extract the content:
 * `scws.patch` - patches the Java sources for BIP and Smart Card Web Server support (prototype)
 * `emulator.patch` - patches the qemu module to support a UICC connected through the PC/SC host interface instead of the default Android SIM simulator

===== PC/SC support (current patches apply to smartcard-api-2_0 and Android 2.3.3r1. The update will follow soon) =====
The patch is optional, it is only required for (native) Android applications relying on the PC/SC interface.<br/>
Download the [http://seek-for-android.googlecode.com/files/pcsc_system_service_v094.tgz pcsc_system_service_v094.tgz] patch and extract the content `pcsc_system_service.patch`
The patch includes:
 * Smartcard system-service based on the the !SmartCard API
 * external/pcsc/pcsc-lite with PC-SC support 
 * external/pcsc/ifdhandler with native IFD Handler based on !SmartCard API

===== Apply the patches and update the API =====
{{{
$ cd <ANDROID_ROOT_DIR>
$ patch -p1 < <path_to_my_patches>/smartcard-api-2_2_0/smartcard-api-2.2.0.patch
$ patch -p1 < <path_to_my_patches>/smartcard-api-2_2_0/uicc.patch
$ patch -p1 < <path_to_my_patches>/smartcard-api-2_2_0/emulator.patch
$ patch -p1 < <path_to_my_patches>/smartcard-api-2_2_0/cts.patch

For SCWS and BIP support:
$ patch -p1 < <path_to_my_patches>/smartcard-webserver-1_1/scws.patch
Optional (only apply once - do not apply this if smartcard-api-2_2_0/emulator.patch was already applied previously!):
$ patch -p1 < <path_to_my_patches>/smartcard-webserver-1_1/emulator.patch

For PC/SC support:
$ patch -p1 < <path_to_my_patches>/pcsc_system_service_v094/pcsc_system_service.patch

Required:
$ make update-api
}}}
Note that applying the patches might result in failed hunks. This is no problem as long as no modification was rejected.
<br/><br/>

== Building the system ==
Compile the sources for the target device (use `crespo`, `passion`, `sapphire` or `dream` depending on the actual development phone)
{{{
$ cd <ANDROID_ROOT_DIR>
$ cd device/samsung/crespo
$ ./extract-files.sh
$ cd -
$ TARGET_PRODUCT=full_crespo TARGET_BUILD_VARIANT=user TARGET_BUILD_TYPE=debug make
}}}
Make sure to have properly connected the reference phone to extract the binary files or downloaded the corresponding ZIP archive to run `unzip-files.sh` instead. The Internet might also provide more up-to-date information about how to build the system for a real device.<br/>
Note that the tools compiled for the host system will be 32bit executables thus you need to ensure to link with a 32bit pcsclite library when the `emulator.patch` is applied. 
<br/><br/>

== Flashing the phone ==
*Note: You'll loose all data on the phone if you proceed*<br/>
To flash the phone, execute:
{{{
$ ./out/host/linux-x86/bin/adb reboot bootloader
$ ANDROID_PRODUCT_OUT=out/debug/target/product/crespo ./out/host/linux-x86/bin/fastboot -w flashall
}}}
If `flashall` fails you might also try:
{{{
$ ./out/host/linux-x86/bin/fastboot flash boot out/debug/target/product/crespo/boot.img
$ ./out/host/linux-x86/bin/fastboot flash system out/debug/target/product/crespo/system.img
$ ./out/host/linux-x86/bin/fastboot flash userdata out/debug/target/product/crespo/data.img
}}}
Again, replace `crespo` with `passion`, `sapphire` or `dream` depending on the actual development phone. Skip flashing the boot partition if you don't want to replace the existing kernel.<br/>
{{{
$ ./out/host/linux-x86/bin/fastboot reboot
}}}
If there are problems while booting it's worth to try
{{{
$ ./out/host/linux-x86/bin/fastboot erase userdata
}}}
Instead of flashing the user partition.
<br/><br/>

== Building the SDK ==
As the new system image running on the phone now contains an extended framework API, these changes need to be included in the SDK as well.<br/>
SDK for Linux or Mac-OS X, run
{{{
$ make PRODUCT-sdk-sdk
}}}
SDK for Windows, run:
{{{
$ make PRODUCT-sdk-win_sdk
}}}
to find the new SDK under `out/host/linux-x86/sdk`
<br/><br/>

== Generating the documentation ==
Run
{{{
$ make docs
}}}
to find the offline documentation under `out/target/common/docs/offline-sdk/reference`