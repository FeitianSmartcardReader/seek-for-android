#summary How to compile the Android sources with SmartCard API and SCWS support

= Introduction =

This documents describes how to build the system from scratch, apply the smart card related patches and flash a development device with the new images.<br/>


== Getting the Android sources ==

A detailed description how to set up the local work environment can be found  [http://source.android.com/source/download.html here].
{{{
$ repo init -u https://android.googlesource.com/platform/manifest -b android-2.3.7_r1
$ repo sync
}}}
<br/>

== Patching the sources ==
Apply the necessary patches in the root directory of the Android source code to enable smart card support.<br/>
Please make sure what patches should be applied as the different use cases (!SmartCard API, SCWS/BIP, PC/SC support) are separated in different download packages. Do not apply patches multiple times.

==== !SmartCard API support ====
Download the [http://seek-for-android.googlecode.com/files/smartcard-api-2_3_0.tgz smartcard-api-2_3_0.tgz] patch and extract the content:
 * `smartcard-api.patch` - patches the Java sources for !SmartCard API support - always required
 * `uicc.patch` - patches the Android Telephony framework with the required UICC methods and for the !SmartCard API !UiccTerminal support within the emulator - optional for SIM access only
 * `emulator.patch` - patches the qemu module to support a UICC connected through the PC/SC host interface instead of the default Android SIM simulator and ASSD support when the host also supports ASSD - optional for emulator support
 * `cts.patch` - adds the compatibility testsuite for the !SmartCard API to verify the integration - optional for CTS support

==== BIP support ====
 * Patch the sources according to [http://code.google.com/p/seek-for-android/wiki/BIP_Extensions BIP Extensions] - optional, only required for BIP support

==== PC/SC support ====
 * Patch the sources according to [http://code.google.com/p/seek-for-android/wiki/PCSCSmartCardServiceIntro PCSC Support] - optional, only required for (native) Android applications relying on the PC/SC interface.<br/>

 
==== Apply the patches ====
{{{
$ cd <ANDROID_SRC_ROOT_DIR>
$ patch -p1 < <path_to_my_patches>/smartcard-api.patch
$ patch -p1 < <path_to_my_patches>/uicc.patch
$ patch -p1 < <path_to_my_patches>/emulator.patch
$ patch -p1 < <path_to_my_patches>/cts.patch
}}}

After applying the patches the android source tree contains all !SmartCard API source files in `packages/apps/SmartCardService`: 
 * `SmartCardService` - contains the complete !SmartCard API project
  * `jni` - contains the native sources for ASSD support
  * `src` - contains the sources of the !SmartCard API Service
  * `openmobileapi` - contains the Open Mobile API shared library project. 
In addition, the smartcard-api.patch extends `build/target/product/core.mk` to include the !SmartCard API in the built.
Also, the UID/GID smartcard/smartcard is introduced to have the !SmartCardService installed with a unique ID.

Update `current.xml` as the new IDs needs to known by the system:
{{{
$ make update-api
}}}
<br/>

== Extract the vendor specific libraries ==
Make sure to have properly connected the reference phone to extract the binary files
{{{
$ cd <ANDROID_ROOT_DIR>
$ cd device/samsung/crespo
$ ./extract-files.sh
$ cd -
}}}
*Note.1* Use `unzip-files.sh` instead if the corresponding ZIP archive is available.<br/>
*Note.2* The Internet might provide more information on this topic.<br/>
<br/>

== Optional: _embedded SE support_ ==
NFC on the Nexus S is not activated per default when compiling the Android sources. To enable NFC with SmartMX support, add the following lines to `/device/samsung/crespo/device_base.mk`
{{{
# NFC support
PRODUCT_PACKAGES += \
    libnfc \
    libnfc_jni \
    Nfc \
    Tag
}}}
<br/>

== Building the system ==
Compile the sources for the target device by either using `lunch` or setting the environment variables manually. Replace `crespo` with `passion`, `sapphire` or `dream` depending on the actual development phone supported by Android:
{{{
$ TARGET_PRODUCT=full_crespo TARGET_BUILD_VARIANT=eng make
}}}
*Note.1* Using `lunch` does include the build variant _user_, it is recommended to use _eng_ instead for easier debugging.

*Note.2* The Internet might provide more up-to-date information about how to build the system for a real devices as this gets outdated pretty soon...<br/>
*Note.3* Keep in mind that the tools compiled for the host system will be 32bit executables. Compiling the patches on a 64bit system requires additional effort with PC/SC support.<br/>
*Note.4* Of course, run `make -jX` to speed up the compilation process where `X` is the optimum number of parallel compiler threads of the build machine.<br/>
<br/>

== Flashing the phone ==
*Note* You'll loose all data on the phone if you proceed!<br/>
To flash the phone, execute:
{{{
$ ./out/host/linux-x86/bin/adb reboot bootloader
$ ANDROID_PRODUCT_OUT=out/target/product/crespo ./out/host/linux-x86/bin/fastboot -w flashall
}}}
If `flashall` fails you might also try:
{{{
$ ./out/host/linux-x86/bin/fastboot erase userdata
$ ./out/host/linux-x86/bin/fastboot erase cache
$ ./out/host/linux-x86/bin/fastboot flash boot out/target/product/crespo/boot.img
$ ./out/host/linux-x86/bin/fastboot flash system out/target/product/crespo/system.img
$ ./out/host/linux-x86/bin/fastboot flash userdata out/target/product/crespo/userdata.img
}}}
Again, replace `crespo` with `passion`, `sapphire` or `dream` depending on the actual development phone. Skip flashing the boot partition if you don't want to replace the existing kernel and ramdisk by executing `fastboot boot boot.img` as the last command.<br/>
Reboot into Android with:
{{{
$ ./out/host/linux-x86/bin/fastboot reboot
}}}
<br/>

== Deprecated: _Building the SDK_ ==
Since !SmartCard API provided as shared library it is not required to rebuild the SDK but just include the org.simalliance.openmobileapi.jar file in Android projects.<br/>
If required, the SDK for Linux or Mac-OS X can still be build with
{{{
$ make PRODUCT-sdk-sdk
}}}
or for Windows:
{{{
$ make PRODUCT-sdk-win_sdk
}}}
Find the new SDK under `out/host/linux-x86/sdk` if required.
<br/><br/>

== Generating the documentation ==
Run
{{{
$ make docs
}}}
to find the offline documentation under `out/target/common/docs/offline-sdk/reference` or use the [http://seek-for-android.googlecode.com/svn/trunk/doc/index.html ApiDoc]
<br/><br/>

== Continue ==
with the instructions as described in section [EmulatorExtension] and/or [UsingSmartCardAPI]